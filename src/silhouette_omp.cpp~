#include <eigen3/Eigen/Dense>
#include <iostream>
#include <fstream>
#include <string>
#include <sstream>
#include <algorithm>
#include <iterator>
#include <vector>
#include "math.h"
#include <omp.h>

#include "timer.c"

using namespace std;

typedef Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor> doubleMatrix;
typedef Eigen::Matrix<float, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor> floatMatrix;

/*--------------------------------------------------------------------------------------------------*/
/*					FILE READ						    */
/*--------------------------------------------------------------------------------------------------*/

void parseTxtFile (string ffile, string lfile, int rows, int cols, int nol, doubleMatrix* inputData, vector<int>* dataSizes)
{
	vector<vector<double> > data (4);

	string line, labelLine;
	string delimiter = " ";
	ifstream dataFile (ffile.c_str());
	ifstream labelFile(lfile.c_str());
	string::size_type sz;
	if (dataFile.is_open() && labelFile.is_open())
	{
		while (getline(dataFile, line) && getline(labelFile, labelLine))
		{
			size_t pos = 0;
			string token;
			while ((pos = line.find(delimiter)) != string::npos)
			{
				token = line.substr(0, pos);
				data[atoi(labelLine.c_str())].push_back(atof(token.c_str()));
    			line.erase(0, pos + delimiter.length());
			}
			data[atoi(labelLine.c_str())].push_back(atof(line.c_str()));
		}
		dataFile.close();
	}
	else cout << "Unable to open file";	

	dataSizes->push_back(data[0].size()/cols);
	for (int i = 1; i < nol; i++)
	{
		data[0].insert(data[0].end(), data[i].begin(), data[i].end());
	    dataSizes->push_back(data[i].size()/cols);
	}

	int k = 0;
	for (int i = 0; i < rows; i++)
	{
		for (int j = 0; j < cols; j++)
		{
			(*inputData)(i, j) = data[0][k];
			k++;
		}
	}
}

/*--------------------------------------------------------------------------------------------------*/
/*			    DISSIMILARITY WITHIN CLUSTER					    */
/*--------------------------------------------------------------------------------------------------*/

doubleMatrix average_dissimilarity_withincluster(doubleMatrix ip_matrix)
{
	doubleMatrix op_matrix;
	doubleMatrix temp;
	temp.resize(ip_matrix.rows(), ip_matrix.rows());
	int i, j;
	#pragma omp parallel for private(i,j) shared (temp,ip_matrix)
	for (i = 0; i < (int)ip_matrix.rows(); i++)
	{
		for (j = 0; j < (int)ip_matrix.rows(); j++)
		{
			temp(i, j) = sqrt(((ip_matrix.row(i) - ip_matrix.row(j)).array().square()).sum());
		}
	}
	op_matrix.resize(ip_matrix.rows(), 1);
	op_matrix = temp.rowwise().sum()/(double)(temp.rows() - 1);

	//cout << op_matrix << endl << endl;

	return(op_matrix);
}

/*--------------------------------------------------------------------------------------------------*/
/*			    DISSIMILARITY BETWEEN 2 DIFF CLUSTERS				    */
/*--------------------------------------------------------------------------------------------------*/

doubleMatrix average_dissimilarity_twoclusters(doubleMatrix ip_matrix, doubleMatrix other_matrix)
{
	doubleMatrix op_matrix;
	doubleMatrix temp;
	temp.resize(ip_matrix.rows(), other_matrix.rows());
	int i, j;
	#pragma omp parallel for private(i,j) shared (temp,ip_matrix)
	for (i = 0; i < (int)ip_matrix.rows(); i++)
	{
		for (j = 0; j < (int)other_matrix.rows(); j++)
		{
			temp(i, j) = sqrt(((ip_matrix.row(i) - other_matrix.row(j)).array().square()).sum());
		}
	}
	op_matrix.resize(ip_matrix.rows(), 1);
	op_matrix = temp.rowwise().mean();
	
	//cout << op_matrix << endl << endl;

	return(op_matrix);
}


/*--------------------------------------------------------------------------------------------------*/
/*			    			MAIN						    */
/*--------------------------------------------------------------------------------------------------*/


int main()
{
	omp_set_num_threads(8);	
	
	stopwatch_init ();
  	struct stopwatch_t* timer = stopwatch_create ();
 	assert (timer);
	long double time = 0;

	int rows = 10000, cols = 100, nol = 3;
	string dataFile = "temp.txt";
	string labelFile = "label.txt";	
	vector<int> dataSizes;
	doubleMatrix inputData(rows, cols);
	
	parseTxtFile(dataFile, labelFile, rows, cols, nol, &inputData, &dataSizes);

	cout << inputData << endl << endl;

	std::vector<int> intervals;
	intervals.push_back(1);
	int var = 0;
	for (int i = 0; i < dataSizes.size(); i++)
	{
		intervals.push_back(dataSizes[i] + var);
		var += dataSizes[i];
		if (i < dataSizes.size() - 1)
		{
			intervals.push_back(var + 1);
		}		
	}

	// for (int x = 0; x < intervals.size(); x++)
	// {
	// 	cout << intervals[x] << endl;
	// }

	stopwatch_start (timer);

	doubleMatrix X;
	X.resize(inputData.rows(), inputData.cols());
	X = inputData.cast<double>();
	doubleMatrix temp;
	doubleMatrix t;
	doubleMatrix t1;
	doubleMatrix a;
	for (int i = 0; i < intervals.size(); i = i + 2)
	{
		temp.resize(((intervals[i + 1] - intervals[i]) + 1), X.cols());
		temp = X.block((intervals[i] - 1), 0, ((intervals[i + 1] - intervals[i]) + 1), X.cols());
		if (i == 0)
		{
			a.resize(temp.rows(), 1);
			t.resize(temp.rows(), 1);
			a = average_dissimilarity_withincluster(temp);
			t = a;
		}
		else
		{
			a.resize(a.rows() + temp.rows(), 1);
			t1.resize(temp.rows(), 1);
			t1 = average_dissimilarity_withincluster(temp);
			a << t,
				t1;
			t.resize(a.rows() + temp.rows(), 1);
			t = a;
		}
	}

	//cout << a << endl;


	doubleMatrix adtc;
	doubleMatrix b;
	doubleMatrix temp1;
	doubleMatrix temp2;
	doubleMatrix t2;
	doubleMatrix t3;
	doubleMatrix t4;
	doubleMatrix t5;
	for (int i = 0; i < intervals.size(); i = i + 2)
	{
		int ctr = 0;
		for (int j = 0; j < intervals.size(); j = j + 2)
		{
			if (i == j)
			{
				ctr = 1;
				continue;
			}
			temp1.resize(((intervals[i + 1] - intervals[i]) + 1), X.cols());
			temp2.resize(((intervals[j + 1] - intervals[j]) + 1), X.cols());
			temp1 = X.block((intervals[i] - 1), 0, ((intervals[i + 1] - intervals[i]) + 1), X.cols());
			temp2 = X.block((intervals[j] - 1), 0, ((intervals[j + 1] - intervals[j]) + 1), X.cols());
			if (j == 0)
			{
				adtc.resize(temp1.rows(), 1);
				t2.resize(temp1.rows(), 1);
				adtc = average_dissimilarity_twoclusters(temp1, temp2);
				t2 = adtc;				
			}
			else if (j == 2 && ctr == 1)
			{
				adtc.resize(temp1.rows(), 1);
				t2.resize(temp1.rows(), 1);
				adtc = average_dissimilarity_twoclusters(temp1, temp2);
				t2 = adtc;
			}
			else
			{
				adtc.resize(adtc.rows(), adtc.cols() + 1);
				t3.resize(temp1.rows(), 1);
				t3 = average_dissimilarity_twoclusters(temp1, temp2);
				adtc << t2, t3;
				t2.resize(adtc.rows(), adtc.cols() + 1);
				t2 = adtc;
			}
		}
		if (i == 0)
		{
			b.resize(adtc.rows(), 1);
			t4.resize(adtc.rows(), 1);
			b = adtc.rowwise().minCoeff();
			t4 = b;
		}
		else
		{
			b.resize(b.rows() + adtc.rows(), 1);
			t5.resize(adtc.rows(), 1);
			t5 = adtc.rowwise().minCoeff();
			b << t4,
				t5;
			t4.resize(b.rows() + adtc.rows(), 1);
			t4 = b;
		}
	}

	//cout << b << endl << endl;

	doubleMatrix SIL;
	doubleMatrix c;
	c.resize(X.rows(), 2);
	SIL.resize(X.rows(), 1);
	c << a, b;
	SIL = (b-a).array()/(c.rowwise().maxCoeff()).array();

	cout << SIL << endl;
	
	time = stopwatch_stop (timer);
	printf("\ntime for implementation: %Lg seconds\n", time);

	return 0;
}
